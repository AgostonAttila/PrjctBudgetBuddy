@page "/"
@page "/login";
@layout FullScreenLayout

@inject IAccountService AccountService
@inject NavigationManager NavigationManager

@using mauiapp.Components.Layout
@using mauiapp.Models.DTO;
@using mauiapp.Services.Account;

<div class="card-body">
	<EditForm Model="@model" OnValidSubmit="HandleSubmit">
		<DataAnnotationsValidator />
		<div class="row">
			<div class="mb-3">
				<label for="Email" class="form-label">Email</label>			
				<InputText @bind-Value="model.Email" class="form-control" />
				<ValidationMessage For="@(() => model.Email)" />		
			</div>
			<div class="mb-3">
				<label for="Password" class="form-label">Password</label>			
				<InputText @bind-Value="model.Password" type="password" class="form-control" />
				<ValidationMessage For="@(() => model.Password)" />
			</div>
			<div class="row">
				<div class="mb-3 col">
					<button class="btn btn-primary">
						@if (loading)
						{
							<span class="spinner-border spinner-border-sm mr-1"></span>
						}
						Login
					</button>			
					<NavLink class="nav-link btn btn-link" href="register">Register</NavLink>
					<NavLink class="nav-link btn btn-link pe-0" href="forgot-password">Forgot Password?</NavLink>
				</div>				
			</div>
		</div>
	</EditForm>
</div>

@code {


	LoginDTO model = new LoginDTO { Email = "", Password = "" };

	private bool loading;
	private string error;

	protected override void OnInitialized()
	{

	}

	async Task HandleSubmit()
	{
		loading = true;
		try
		{
			var result = await AccountService.Login(model);
			if (result.IsSuccess)
			{
				var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/home";
				loading = false;
				NavigationManager.NavigateTo(returnUrl);
			}
			else
			{
				loading = false;
			}
		}
		catch (Exception ex)
		{
			error = ex.Message;
			loading = false;
			StateHasChanged();
		}
	}
}
